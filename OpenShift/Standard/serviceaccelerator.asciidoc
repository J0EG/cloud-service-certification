= Detailed Security Configuration0

== Overview

This section is meant to provide an opinionated approach towards the
implementation security controls by domain. Although the approaches may
not be a fit for all use cases or complete for production use, they are
meant to guide the reader towards current best practices and design
considerations to achieve security control objectives.

=== *Controls and Architectures*

The information provided in the table below is compiled from product
documentation, blog posts, white papers and other resources and
emphasize recommended configurations that ensure Red Hat OpenShift
Security and Platform Integrity.


|===
|*Security Domain*|*Control & Architectural Suggestions*|*References*
|*Authentication & Authorization*
|
|
|*How does the service you are evaluating handle authentication*
|There are several Related to Authentication and Authorization -
Users - The primary entity that interacts with the API Server, Assign permissions to the user by adding roles to the user or groups the user belongs to
Identity - Keeps a record of successful auth attempts from a specific user and identity provider.  All data concerning the source of the authentication is stored on the provider.
Service Account - Applications can directly communicate with the API, Service accounts are used in place of sharing user accouts.
Groups - Groups contain a set of specific users, users can belong to multiple groups. Permissions can be assigned to multiple users via groups.

Users are allowed interaction with OpenShift via the Authentication and
Authorization Layers, A user makes a request to the API, and the
authentication layer authenticates the user. The authorization layer
uses RBAC to determin privileges.

There are two authentication methods: 1) OAuth Access Tokens and 2)
X.509 Client Certificates

The Authentication Operator runs an OAuth Service which provide the
access tokens to users when they attempt to authenticate to the API. The
OAuth Server uses an identity provider to validate the request.
OpenShift creates the identity and user resources after a successful
login.

Configurable Identity providers include: HTPAsswd. Keystone, LDAP,
GitHub or GitHub Enterprise, OpenID Connect, Google, GitLab and Basic
Authentication.

By default the OpenShift Container Platform creates a cluster
administrator kubeadmin after installation which should be removed once
authentication is configured.

https://docs.openshift.com/container-platform/4.6/authentication/remove-kubeadmin.html[https://docs.openshift.com/container-platform/4.6/authentication/remove-kubeadmin.html]

$ oc delete secrets kubeadmin -n kube-system

a|

* Understanding authentication: https://docs.openshift.com/container-platform/4.6/authentication/understanding-authentication.html
* Orgs Management and Team Onboarding in OpenShift: https://www.openshift.com/blog/orgs-management-and-team-onboarding-in-openshift-a-fully-automated-approach
* Removing the kubeadmin user: https://docs.openshift.com/container-platform/4.6/authentication/remove-kubeadmin.html


|*How does the service you are evaluating handle Authorization?*

|After authentication, the OpenShift API request is passed along (with the asserted User info) to the Kubernetes authorization layer (after a visit to the Audit layer). This layer is responsible for ensuring that the user has been granted permissions, by policy, to perform the requested action against the requested resource. Although the Kubernetes authorization layer is pluggable, OpenShift does not allow customization here, and only uses the Role-Based Access Control (RBAC) authorization type
Authorization is handeled by rules, roles and bindings.
Rules - Set of permitted verbs on a set of objects. For example, whether a user or service account can create pods.
Roles - Collections of rules. You can associate, or bind, users and groups to multiple roles.
Bindings - Associations between users and/or groups with a role.

a|

* Using RBAC to define and apply permissions: https://docs.openshift.com/container-platform/4.6/authentication/using-rbac.html

|*How does the service you are evaluating handle RBAC?*
|Authorization in OpenShift is managed using role-based access control (RBAC). OpenShift takes a deny-by-default approach to RBAC. There are two types of roles within OpenShift that determine which actions RBAC can authorize, Cluster and Local.

Cluster Role - give Users or Groups the ability to manage the OpenShift Cluster
Local Role - Users or Groups that are managing objects and attributes at the project level

Default Roles available in OpenShift:
admin - Can Manage All project Resources
basic-user - read access to the project
cluster-admin - Users with this role have access to the cluster resources. These users have full control of the cluster.
cluster-statue - this role grants the ability to get status information
edit - create, edit, change and delete common application resources from the project
self-provisioner - this role allows the creation of new projects (cluster role not a project level role)
view - Users with this role can view project resources.

a|
* Using RBAC to define and apply permissions: https://docs.openshift.com/container-platform/4.5/authentication/using-rbac.html

* How to customize OpenShift RBAC permissions: https://developers.redhat.com/blog/2017/12/04/customize-openshift-rbac-permissions/

|*How does the service you are evaluating handle Privileged Access Management?*
|OpenShift can use Security Context Constraints to control permissions for pods. These permissions include actions that a pod, a collection of containers, can perform and what resources it can access. You can use SCCs to define a set of conditions that a pod must run with in order to be accepted into the system.

SCCs allow an administrator to control:

Whether a pod can run privileged containers.
The capabilities that a container can request.
The use of host directories as volumes.
The SELinux context of the container.
The container user ID.
The use of host namespaces and networking.
The allocation of an FSGroup that owns the podâ€™s volumes.
The configuration of allowable supplemental groups.
Whether a container requires the use of a read only root file system.
The usage of volume types.
The configuration of allowable seccomp profiles.
a|
* Managing security context constraints: https://docs.openshift.com/container-platform/4.6/authentication/managing-security-context-constraints.html

* Managing SCCs in OpenShift: https://www.openshift.com/blog/managing-sccs-in-openshift

* Introduction to Security Contexts and SCCs: https://www.openshift.com/blog/introduction-to-security-contexts-and-sccs

|===
